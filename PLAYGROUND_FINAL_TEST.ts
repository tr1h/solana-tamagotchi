// ============================================================================
// üéÆ –ü–û–õ–ù–´–ô –¢–ï–°–¢ TAMAGOTCHI –° AUTO DECAY
// ============================================================================

describe("Tamagotchi Auto Decay", () => {
  
  // ============================================================================
  // –®–ê–ì 1: –ó–ê–ö–†–´–¢–¨ –°–¢–ê–†–û–ì–û –ú–ï–†–¢–í–û–ì–û –ü–ò–¢–û–ú–¶–ê (–µ—Å–ª–∏ –µ—Å—Ç—å)
  // ============================================================================
  
  it("1Ô∏è‚É£ –ó–∞–∫—Ä—ã—Ç—å —Å—Ç–∞—Ä–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞", async () => {
    const [petPda] = await anchor.web3.PublicKey.findProgramAddressSync(
      [Buffer.from("pet"), pg.wallet.publicKey.toBuffer()],
      pg.PROGRAM_ID
    );
    
    try {
      const petAccount = await pg.program.account.pet.fetch(petPda);
      console.log("\nüîç –ù–∞–π–¥–µ–Ω —Å—Ç–∞—Ä—ã–π –ø–∏—Ç–æ–º–µ—Ü:");
      console.log("   Pet ID:", petAccount.petId);
      console.log("   Alive:", petAccount.isAlive);
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
      const tx = await pg.program.methods
        .closePet()
        .accounts({
          pet: petPda,
          owner: pg.wallet.publicKey,
        })
        .rpc();
        
      console.log("‚úÖ –°—Ç–∞—Ä—ã–π –ø–∏—Ç–æ–º–µ—Ü –∑–∞–∫—Ä—ã—Ç!");
      console.log("üí∞ Rent –≤–æ–∑–≤—Ä–∞—â–µ–Ω –Ω–∞ –∫–æ—à–µ–ª–µ–∫");
      console.log("üìù TX:", tx);
      
    } catch (e) {
      console.log("‚ÑπÔ∏è –°—Ç–∞—Ä—ã–π –ø–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)");
    }
  });
  
  // ============================================================================
  // –®–ê–ì 2: –°–û–ó–î–ê–¢–¨ –ù–û–í–û–ì–û –ü–ò–¢–û–ú–¶–ê
  // ============================================================================
  
  it("2Ô∏è‚É£ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞", async () => {
    const [petPda] = await anchor.web3.PublicKey.findProgramAddressSync(
      [Buffer.from("pet"), pg.wallet.publicKey.toBuffer()],
      pg.PROGRAM_ID
    );
    
    console.log("\nüê£ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞...");
    
    const tx = await pg.program.methods
      .createPet()
      .accounts({
        pet: petPda,
        owner: pg.wallet.publicKey,
        systemProgram: anchor.web3.SystemProgram.programId,
      })
      .rpc();
    
    console.log("‚úÖ –ü–∏—Ç–æ–º–µ—Ü —Å–æ–∑–¥–∞–Ω!");
    console.log("üìù TX:", tx);
    
    // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const petAccount = await pg.program.account.pet.fetch(petPda);
    
    console.log("\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    console.log("üéâ –í–ê–® –ù–û–í–´–ô –ü–ò–¢–û–ú–ï–¶:");
    console.log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    console.log("üÜî Pet ID:", petAccount.petId);
    console.log("üß¨ DNA:", petAccount.dna.toString());
    console.log("üé® Species:", petAccount.species);
    console.log("‚ú® Rarity:", ["Common", "Uncommon", "Rare", "Epic", "Legendary"][petAccount.rarity]);
    console.log("üìä Level:", petAccount.level);
    console.log("‚ù§Ô∏è  Health:", petAccount.health);
    console.log("üçñ Hunger:", petAccount.hunger);
    console.log("üòä Happiness:", petAccount.happiness);
    console.log("‚ö° Energy:", petAccount.energy);
    console.log("üíÄ Alive:", petAccount.isAlive);
    console.log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n");
  });
  
  // ============================================================================
  // –®–ê–ì 3: –¢–ï–°–¢ –ö–û–†–ú–õ–ï–ù–ò–Ø (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º decay)
  // ============================================================================
  
  it("3Ô∏è‚É£ –ü–æ–∫–æ—Ä–º–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞ (—Å auto decay)", async () => {
    const [petPda] = await anchor.web3.PublicKey.findProgramAddressSync(
      [Buffer.from("pet"), pg.wallet.publicKey.toBuffer()],
      pg.PROGRAM_ID
    );
    
    // TAMA token
    const tokenMint = new anchor.web3.PublicKey("74KGR9mdiiiqVW9QCnFmZz8cyj39ZoCaKexrSxF8fpQD");
    
    // User token account
    const userTokenAccount = await anchor.utils.token.associatedAddress({
      mint: tokenMint,
      owner: pg.wallet.publicKey
    });
    
    console.log("\nüçñ –ö–æ—Ä–º–∏–º –ø–∏—Ç–æ–º—Ü–∞...");
    console.log("   (Decay –ø—Ä–∏–º–µ–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!)");
    
    const tx = await pg.program.methods
      .feedPet()
      .accounts({
        pet: petPda,
        owner: pg.wallet.publicKey,
        userTokenAccount: userTokenAccount,
        tokenMint: tokenMint,
        tokenProgram: anchor.utils.token.TOKEN_PROGRAM_ID,
      })
      .rpc();
    
    console.log("‚úÖ –ü–æ–∫–æ—Ä–º–ª–µ–Ω!");
    console.log("üî• –°–æ–∂–∂–µ–Ω–æ 5 TAMA");
    console.log("üìù TX:", tx);
    
    const petAccount = await pg.program.account.pet.fetch(petPda);
    console.log("\nüìä –°—Ç–∞—Ç—ã –ø–æ—Å–ª–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è:");
    console.log("   Health:", petAccount.health);
    console.log("   Hunger:", petAccount.hunger);
    console.log("   Happiness:", petAccount.happiness);
    console.log("   Energy:", petAccount.energy);
    console.log("   Level:", petAccount.level);
    console.log("   EXP:", petAccount.experience);
  });
  
  // ============================================================================
  // –®–ê–ì 4: –¢–ï–°–¢ –ò–ì–†–´ (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º decay)
  // ============================================================================
  
  it("4Ô∏è‚É£ –ò–≥—Ä–∞—Ç—å —Å –ø–∏—Ç–æ–º—Ü–µ–º (—Å auto decay)", async () => {
    const [petPda] = await anchor.web3.PublicKey.findProgramAddressSync(
      [Buffer.from("pet"), pg.wallet.publicKey.toBuffer()],
      pg.PROGRAM_ID
    );
    
    const tokenMint = new anchor.web3.PublicKey("74KGR9mdiiiqVW9QCnFmZz8cyj39ZoCaKexrSxF8fpQD");
    const userTokenAccount = await anchor.utils.token.associatedAddress({
      mint: tokenMint,
      owner: pg.wallet.publicKey
    });
    
    console.log("\nüéÆ –ò–≥—Ä–∞–µ–º —Å –ø–∏—Ç–æ–º—Ü–µ–º...");
    
    const tx = await pg.program.methods
      .playWithPet()
      .accounts({
        pet: petPda,
        owner: pg.wallet.publicKey,
        userTokenAccount: userTokenAccount,
        tokenMint: tokenMint,
        tokenProgram: anchor.utils.token.TOKEN_PROGRAM_ID,
      })
      .rpc();
    
    console.log("‚úÖ –ü–æ–∏–≥—Ä–∞–ª–∏!");
    console.log("üî• –°–æ–∂–∂–µ–Ω–æ 3 TAMA");
    console.log("üìù TX:", tx);
    
    const petAccount = await pg.program.account.pet.fetch(petPda);
    console.log("\nüìä –°—Ç–∞—Ç—ã –ø–æ—Å–ª–µ –∏–≥—Ä—ã:");
    console.log("   Health:", petAccount.health);
    console.log("   Hunger:", petAccount.hunger);
    console.log("   Happiness:", petAccount.happiness);
    console.log("   Energy:", petAccount.energy);
    console.log("   Level:", petAccount.level);
    console.log("   EXP:", petAccount.experience);
  });
  
  // ============================================================================
  // –®–ê–ì 5: –¢–ï–°–¢ –û–¢–î–´–•–ê (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º decay)
  // ============================================================================
  
  it("5Ô∏è‚É£ –û—Ç–¥–æ—Ö–Ω—É—Ç—å (—Å auto decay)", async () => {
    const [petPda] = await anchor.web3.PublicKey.findProgramAddressSync(
      [Buffer.from("pet"), pg.wallet.publicKey.toBuffer()],
      pg.PROGRAM_ID
    );
    
    const tokenMint = new anchor.web3.PublicKey("74KGR9mdiiiqVW9QCnFmZz8cyj39ZoCaKexrSxF8fpQD");
    const userTokenAccount = await anchor.utils.token.associatedAddress({
      mint: tokenMint,
      owner: pg.wallet.publicKey
    });
    
    console.log("\nüò¥ –ü–∏—Ç–æ–º–µ—Ü –æ—Ç–¥—ã—Ö–∞–µ—Ç...");
    
    const tx = await pg.program.methods
      .restPet()
      .accounts({
        pet: petPda,
        owner: pg.wallet.publicKey,
        userTokenAccount: userTokenAccount,
        tokenMint: tokenMint,
        tokenProgram: anchor.utils.token.TOKEN_PROGRAM_ID,
      })
      .rpc();
    
    console.log("‚úÖ –û—Ç–¥–æ—Ö–Ω—É–ª!");
    console.log("üî• –°–æ–∂–∂–µ–Ω–æ 2 TAMA");
    console.log("üìù TX:", tx);
    
    const petAccount = await pg.program.account.pet.fetch(petPda);
    console.log("\nüìä –°—Ç–∞—Ç—ã –ø–æ—Å–ª–µ –æ—Ç–¥—ã—Ö–∞:");
    console.log("   Health:", petAccount.health);
    console.log("   Hunger:", petAccount.hunger);
    console.log("   Happiness:", petAccount.happiness);
    console.log("   Energy:", petAccount.energy);
    console.log("   Level:", petAccount.level);
    console.log("   Total burned:", petAccount.totalTokensBurned.toString());
  });
  
  // ============================================================================
  // –®–ê–ì 6: –¢–ï–°–¢ –†–£–ß–ù–û–ì–û DECAY (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
  // ============================================================================
  
  it("6Ô∏è‚É£ –û–±–Ω–æ–≤–∏—Ç—å decay –≤—Ä—É—á–Ω—É—é (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)", async () => {
    const [petPda] = await anchor.web3.PublicKey.findProgramAddressSync(
      [Buffer.from("pet"), pg.wallet.publicKey.toBuffer()],
      pg.PROGRAM_ID
    );
    
    console.log("\n‚è∞ –û–±–Ω–æ–≤–ª—è–µ–º decay –≤—Ä—É—á–Ω—É—é...");
    console.log("   (–≠—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–æ–≤)");
    
    try {
      const tx = await pg.program.methods
        .updateDecay()
        .accounts({
          pet: petPda,
        })
        .rpc();
      
      console.log("‚úÖ Decay –æ–±–Ω–æ–≤–ª–µ–Ω!");
      console.log("üìù TX:", tx);
      
      const petAccount = await pg.program.account.pet.fetch(petPda);
      console.log("\nüìä –¢–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—ã:");
      console.log("   Health:", petAccount.health);
      console.log("   Hunger:", petAccount.hunger);
      console.log("   Happiness:", petAccount.happiness);
      console.log("   Energy:", petAccount.energy);
      console.log("   Age:", petAccount.age, "seconds");
    } catch (e) {
      console.log("‚ÑπÔ∏è Decay –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω (–ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 1 –º–∏–Ω—É—Ç—ã)");
    }
  });
  
  // ============================================================================
  // –®–ê–ì 7: –§–ò–ù–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
  // ============================================================================
  
  it("7Ô∏è‚É£ –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", async () => {
    const [petPda] = await anchor.web3.PublicKey.findProgramAddressSync(
      [Buffer.from("pet"), pg.wallet.publicKey.toBuffer()],
      pg.PROGRAM_ID
    );
    
    const petAccount = await pg.program.account.pet.fetch(petPda);
    
    console.log("\n");
    console.log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    console.log("üéä –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –§–ò–ù–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:");
    console.log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    console.log("");
    console.log("üìù Program ID:", pg.PROGRAM_ID.toString());
    console.log("üê£ Pet PDA:", petPda.toString());
    console.log("üíº Owner:", pg.wallet.publicKey.toString());
    console.log("");
    console.log("üÜî Pet ID:", petAccount.petId);
    console.log("üìä Level:", petAccount.level);
    console.log("‚≠ê Experience:", petAccount.experience);
    console.log("‚ù§Ô∏è  Health:", petAccount.health);
    console.log("üçñ Hunger:", petAccount.hunger);
    console.log("üòä Happiness:", petAccount.happiness);
    console.log("‚ö° Energy:", petAccount.energy);
    console.log("üéÆ Actions:", petAccount.actionsCount);
    console.log("üî• Tokens Burned:", petAccount.totalTokensBurned.toString());
    console.log("üíÄ Alive:", petAccount.isAlive);
    console.log("");
    console.log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    console.log("‚úÖ –ö–û–ù–¢–†–ê–ö–¢ –†–ê–ë–û–¢–ê–ï–¢ –ò–î–ï–ê–õ–¨–ù–û!");
    console.log("üöÄ –ì–û–¢–û–í –ö –î–ï–ü–õ–û–Æ –§–†–û–ù–¢–ï–ù–î–ê!");
    console.log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    console.log("");
  });
});


