// Crypto Tamagotchi Enhanced - Game Engine
// ==========================================

// –ò–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
let gameState = {
    petName: "–ü–∏—Ç–æ–º–µ—Ü",
    level: 1,
    stage: 0,
    health: 100,
    hunger: 100,
    happiness: 100,
    energy: 100,
    experience: 0,
    age: 0,
    tokens: 1000,
    earnedTokens: 0,
    walletConnected: false,
    lastUpdate: Date.now(),
    totalActions: 0,
    actionStreak: 0,
    lastActionTime: 0,
    achievements: {},
    comboMultiplier: 1
};

// –≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ç–∞–¥–∏–∏
const stages = [
    { name: "–Ø–π—Ü–æ", sprite: "ü•ö", expRequired: 0, mood: ["ü§î"] },
    { name: "–ú–ª–∞–¥–µ–Ω–µ—Ü", sprite: "üê£", expRequired: 0, mood: ["üòä", "üò¥", "üò¢", "ü§ó"] },
    { name: "–ü–æ–¥—Ä–æ—Å—Ç–æ–∫", sprite: "üê•", expRequired: 100, mood: ["üòé", "üòÅ", "üò¥", "üò§"] },
    { name: "–í–∑—Ä–æ—Å–ª—ã–π", sprite: "üêì", expRequired: 300, mood: ["üòÑ", "üòå", "üò†", "ü§©"] },
    { name: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π", sprite: "ü¶ú", expRequired: 600, mood: ["üåü", "‚ú®", "üí´", "üéâ"] }
];

// –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
const achievements = {
    firstPet: { icon: "ü•ö", name: "–ü–µ—Ä–≤—ã–π", desc: "–ó–∞–≤–µ—Å—Ç–∏ –ø–∏—Ç–æ–º—Ü–∞", unlocked: false },
    feed10: { icon: "üçñ", name: "–ü–æ–≤–∞—Ä", desc: "–ü–æ–∫–æ—Ä–º–∏—Ç—å 10 —Ä–∞–∑", unlocked: false, progress: 0, target: 10 },
    play50: { icon: "üéÆ", name: "–ò–≥—Ä–æ–∫", desc: "–°—ã–≥—Ä–∞—Ç—å 50 —Ä–∞–∑", unlocked: false, progress: 0, target: 50 },
    level5: { icon: "‚≠ê", name: "–ú–∞—Å—Ç–µ—Ä", desc: "–î–æ—Å—Ç–∏—á—å 5 —É—Ä–æ–≤–Ω—è", unlocked: false, progress: 0, target: 5 },
    rich: { icon: "üí∞", name: "–ë–æ–≥–∞—á", desc: "–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å 5000 —Ç–æ–∫–µ–Ω–æ–≤", unlocked: false, progress: 0, target: 5000 },
    evolution3: { icon: "üêì", name: "–≠–≤–æ–ª—é—Ü–∏—è", desc: "–î–æ—Å—Ç–∏—á—å 3 —Å—Ç–∞–¥–∏–∏", unlocked: false, progress: 0, target: 3 },
    legendary: { icon: "ü¶ú", name: "–õ–µ–≥–µ–Ω–¥–∞", desc: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è —Å—Ç–∞–¥–∏—è", unlocked: false },
    combo10: { icon: "üî•", name: "–ö–æ–º–±–æ", desc: "10 –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–¥—Ä—è–¥", unlocked: false, progress: 0, target: 10 },
    week: { icon: "üìÖ", name: "–ù–µ–¥–µ–ª—è", desc: "–ü–∏—Ç–æ–º—Ü—É 7 –¥–Ω–µ–π", unlocked: false, progress: 0, target: 7 },
    healthy: { icon: "üíö", name: "–ó–¥–æ—Ä–æ–≤—è–∫", desc: "100% –∑–¥–æ—Ä–æ–≤—å–µ 24 —á–∞—Å–∞", unlocked: false }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function initAchievements() {
    const grid = document.getElementById('achievementsGrid');
    grid.innerHTML = '';
    
    Object.keys(achievements).forEach(key => {
        const achievement = achievements[key];
        const div = document.createElement('div');
        div.className = achievement.unlocked ? 'achievement' : 'achievement locked';
        div.innerHTML = `
            <div class="achievement-icon">${achievement.icon}</div>
            <div class="achievement-name">${achievement.name}</div>
        `;
        div.title = achievement.desc + (achievement.progress !== undefined ? 
            ` (${achievement.progress}/${achievement.target})` : '');
        grid.appendChild(div);
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function checkAchievements() {
    let newAchievements = 0;
    
    // –ü–µ—Ä–≤—ã–π –ø–∏—Ç–æ–º–µ—Ü
    if (gameState.stage > 0 && !achievements.firstPet.unlocked) {
        unlockAchievement('firstPet');
        newAchievements++;
    }
    
    // –£—Ä–æ–≤–µ–Ω—å 5
    if (gameState.level >= 5 && !achievements.level5.unlocked) {
        achievements.level5.progress = gameState.level;
        if (gameState.level >= achievements.level5.target) {
            unlockAchievement('level5');
            newAchievements++;
        }
    }
    
    // –ë–æ–≥–∞—á
    if (gameState.earnedTokens >= 5000 && !achievements.rich.unlocked) {
        achievements.rich.progress = gameState.earnedTokens;
        if (gameState.earnedTokens >= achievements.rich.target) {
            unlockAchievement('rich');
            newAchievements++;
        }
    }
    
    // –≠–≤–æ–ª—é—Ü–∏—è 3
    if (gameState.stage >= 3 && !achievements.evolution3.unlocked) {
        achievements.evolution3.progress = gameState.stage;
        if (gameState.stage >= achievements.evolution3.target) {
            unlockAchievement('evolution3');
            newAchievements++;
        }
    }
    
    // –õ–µ–≥–µ–Ω–¥–∞
    if (gameState.stage >= 4 && !achievements.legendary.unlocked) {
        unlockAchievement('legendary');
        newAchievements++;
    }
    
    // –ö–æ–º–±–æ
    if (gameState.actionStreak >= 10 && !achievements.combo10.unlocked) {
        achievements.combo10.progress = gameState.actionStreak;
        if (gameState.actionStreak >= achievements.combo10.target) {
            unlockAchievement('combo10');
            newAchievements++;
        }
    }
    
    // –ù–µ–¥–µ–ª—è
    if (gameState.age >= 7 && !achievements.week.unlocked) {
        achievements.week.progress = gameState.age;
        if (gameState.age >= achievements.week.target) {
            unlockAchievement('week');
            newAchievements++;
        }
    }
    
    if (newAchievements > 0) {
        initAchievements();
    }
}

// –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
function unlockAchievement(key) {
    achievements[key].unlocked = true;
    showNotification(`üéâ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${achievements[key].name}!`);
    
    // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    const reward = 100;
    gameState.tokens += reward;
    gameState.earnedTokens += reward;
    showNotification(`üéÅ –ù–∞–≥—Ä–∞–¥–∞: +${reward} —Ç–æ–∫–µ–Ω–æ–≤!`);
    
    playSound('achievement');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞
function updateMood() {
    const avgStats = (gameState.health + gameState.hunger + gameState.happiness + gameState.energy) / 4;
    let mood;
    
    if (avgStats > 80) mood = stages[gameState.stage].mood[0]; // –°—á–∞—Å—Ç–ª–∏–≤—ã–π
    else if (avgStats > 60) mood = stages[gameState.stage].mood[1]; // –ù–æ—Ä–º–∞–ª—å–Ω—ã–π
    else if (avgStats > 40) mood = stages[gameState.stage].mood[2]; // –ì—Ä—É—Å—Ç–Ω—ã–π
    else mood = stages[gameState.stage].mood[3] || stages[gameState.stage].mood[2]; // –û—á–µ–Ω—å –≥—Ä—É—Å—Ç–Ω—ã–π
    
    document.getElementById('moodIndicator').textContent = mood;
}

// –°–∏—Å—Ç–µ–º–∞ –∫–æ–º–±–æ
function updateCombo() {
    const now = Date.now();
    const timeSinceLastAction = now - gameState.lastActionTime;
    
    // –ö–æ–º–±–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
    if (timeSinceLastAction > 30000) {
        gameState.actionStreak = 0;
        gameState.comboMultiplier = 1;
        document.getElementById('comboCounter').classList.remove('show');
    } else {
        gameState.actionStreak++;
        gameState.comboMultiplier = 1 + (gameState.actionStreak * 0.1); // +10% –∑–∞ –∫–∞–∂–¥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        
        const comboEl = document.getElementById('comboCounter');
        comboEl.textContent = `üî• COMBO x${gameState.actionStreak}`;
        comboEl.classList.add('show');
        
        if (gameState.actionStreak >= 10) {
            achievements.combo10.progress = gameState.actionStreak;
        }
    }
    
    gameState.lastActionTime = now;
}

// –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å—Ç–∏—Ü
function createParticles() {
    const container = document.getElementById('particles');
    for (let i = 0; i < 5; i++) {
        setTimeout(() => {
            const particle = document.createElement('div');
            particle.className = 'particle';
            particle.style.left = Math.random() * 100 + '%';
            particle.style.animationDelay = Math.random() + 's';
            container.appendChild(particle);
            
            setTimeout(() => particle.remove(), 3000);
        }, i * 100);
    }
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
async function connectWallet() {
    try {
        if (!window.solana || !window.solana.isPhantom) {
            showNotification("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Phantom –∫–æ—à–µ–ª–µ–∫!");
            window.open('https://phantom.app/', '_blank');
            return;
        }

        const response = await window.solana.connect();
        const publicKey = response.publicKey.toString();
        
        gameState.walletConnected = true;
        document.getElementById('connectWallet').style.display = 'none';
        document.getElementById('walletInfo').style.display = 'block';
        document.getElementById('walletInfo').innerHTML = `
            ‚úÖ ${publicKey.slice(0, 4)}...${publicKey.slice(-4)}
        `;
        
        showNotification("‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω!");
        playSound('connect');
        saveGame();
    } catch (err) {
        showNotification("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞");
        console.error(err);
    }
}

// –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
function startGame() {
    if (gameState.tokens < 10) {
        showNotification("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤!");
        return;
    }
    
    gameState.tokens -= 10;
    gameState.stage = 1;
    gameState.totalActions++;
    
    document.getElementById('startScreen').style.display = 'none';
    document.getElementById('gameScreen').style.display = 'block';
    
    initAchievements();
    updateDisplay();
    startGameLoop();
    showNotification("üéâ –ü–∏—Ç–æ–º–µ—Ü —Ä–æ–¥–∏–ª—Å—è! –ó–∞–±–æ—Ç—å—Å—è –æ –Ω–µ–º!");
    checkAchievements();
    createParticles();
    playSound('birth');
    saveGame();
}

// –î–µ–π—Å—Ç–≤–∏—è —Å –ø–∏—Ç–æ–º—Ü–µ–º
function feedPet() {
    if (gameState.tokens < 5) {
        showNotification("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤!");
        return;
    }
    
    gameState.tokens -= 5;
    gameState.hunger = Math.min(100, gameState.hunger + 30);
    gameState.health = Math.min(100, gameState.health + 5);
    gameState.experience += 5;
    gameState.totalActions++;
    
    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: –ü–æ–≤–∞—Ä
    if (!achievements.feed10.unlocked) {
        achievements.feed10.progress = (achievements.feed10.progress || 0) + 1;
        if (achievements.feed10.progress >= achievements.feed10.target) {
            unlockAchievement('feed10');
        }
    }
    
    updateCombo();
    showEmotion("üçñ");
    showNotification("üòã –ü–∏—Ç–æ–º–µ—Ü –ø–æ–∫–æ—Ä–º–ª–µ–Ω!");
    earnReward(2);
    updateDisplay();
    checkEvolution();
    checkAchievements();
    createParticles();
    playSound('feed');
    saveGame();
}

function playWithPet() {
    if (gameState.tokens < 3) {
        showNotification("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤!");
        return;
    }
    
    if (gameState.energy < 20) {
        showNotification("üò¥ –ü–∏—Ç–æ–º–µ—Ü —É—Å—Ç–∞–ª! –î–∞–π—Ç–µ –µ–º—É –æ—Ç–¥–æ—Ö–Ω—É—Ç—å.");
        return;
    }
    
    gameState.tokens -= 3;
    gameState.happiness = Math.min(100, gameState.happiness + 25);
    gameState.energy = Math.max(0, gameState.energy - 15);
    gameState.experience += 8;
    gameState.totalActions++;
    
    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: –ò–≥—Ä–æ–∫
    if (!achievements.play50.unlocked) {
        achievements.play50.progress = (achievements.play50.progress || 0) + 1;
        if (achievements.play50.progress >= achievements.play50.target) {
            unlockAchievement('play50');
        }
    }
    
    updateCombo();
    showEmotion("üéÆ");
    showNotification("üéâ –ü–∏—Ç–æ–º–µ—Ü –∏–≥—Ä–∞–µ—Ç –∏ —Ä–∞–¥—É–µ—Ç—Å—è!");
    earnReward(3);
    updateDisplay();
    checkEvolution();
    checkAchievements();
    createParticles();
    playSound('play');
    saveGame();
}

function healPet() {
    if (gameState.tokens < 8) {
        showNotification("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤!");
        return;
    }
    
    if (gameState.health >= 90) {
        showNotification("üíö –ü–∏—Ç–æ–º–µ—Ü –∑–¥–æ—Ä–æ–≤!");
        return;
    }
    
    gameState.tokens -= 8;
    gameState.health = 100;
    gameState.experience += 3;
    gameState.totalActions++;
    
    updateCombo();
    showEmotion("üíä");
    showNotification("üíö –ü–∏—Ç–æ–º–µ—Ü –≤—ã–ª–µ—á–µ–Ω!");
    earnReward(1);
    updateDisplay();
    checkAchievements();
    playSound('heal');
    saveGame();
}

function restPet() {
    if (gameState.tokens < 2) {
        showNotification("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤!");
        return;
    }
    
    gameState.tokens -= 2;
    gameState.energy = Math.min(100, gameState.energy + 40);
    gameState.health = Math.min(100, gameState.health + 10);
    gameState.experience += 3;
    gameState.totalActions++;
    
    updateCombo();
    showEmotion("üò¥");
    showNotification("üí§ –ü–∏—Ç–æ–º–µ—Ü –æ—Ç–¥—ã—Ö–∞–µ—Ç...");
    earnReward(2);
    updateDisplay();
    checkAchievements();
    playSound('rest');
    saveGame();
}

// –ö–ª–∏–∫ –ø–æ –ø–∏—Ç–æ–º—Ü—É
function petClick() {
    const sprite = document.getElementById('petSprite');
    sprite.style.animation = 'none';
    setTimeout(() => {
        sprite.style.animation = 'float 3s ease-in-out infinite';
    }, 10);
    
    showEmotion("‚ù§Ô∏è");
    gameState.happiness = Math.min(100, gameState.happiness + 2);
    gameState.experience += 1;
    createParticles();
    updateDisplay();
    playSound('click');
}

// –ù–∞–≥—Ä–∞–¥–∞ —Ç–æ–∫–µ–Ω–∞–º–∏
function earnReward(amount) {
    const bonus = Math.floor((Math.random() * amount + amount) * gameState.comboMultiplier);
    gameState.tokens += bonus;
    gameState.earnedTokens += bonus;
    
    if (gameState.comboMultiplier > 1) {
        showNotification(`üéÅ +${bonus} —Ç–æ–∫–µ–Ω–æ–≤! (–ö–æ–º–±–æ –±–æ–Ω—É—Å x${gameState.comboMultiplier.toFixed(1)})`);
    } else {
        showNotification(`üéÅ +${bonus} —Ç–æ–∫–µ–Ω–æ–≤!`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –±–æ–≥–∞—á–∞
    if (gameState.earnedTokens >= 5000) {
        achievements.rich.progress = gameState.earnedTokens;
        checkAchievements();
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏
function checkEvolution() {
    const currentStage = gameState.stage;
    
    for (let i = stages.length - 1; i >= 0; i--) {
        if (gameState.experience >= stages[i].expRequired && i > currentStage) {
            gameState.stage = i;
            gameState.level++;
            
            showNotification(`üéâ –≠–í–û–õ–Æ–¶–ò–Ø! –¢–µ–ø–µ—Ä—å: ${stages[i].name}!`);
            
            const notice = document.getElementById('evolutionNotice');
            notice.innerHTML = `<div class="evolution-notice">üåü –≠–≤–æ–ª—é—Ü–∏—è! ${stages[i].name} üåü</div>`;
            
            setTimeout(() => {
                notice.innerHTML = '';
            }, 5000);
            
            // –ë–æ–Ω—É—Å –∑–∞ —ç–≤–æ–ª—é—Ü–∏—é
            const bonus = 50 * gameState.level;
            gameState.tokens += bonus;
            showNotification(`üéÅ –ë–æ–Ω—É—Å –∑–∞ —ç–≤–æ–ª—é—Ü–∏—é: ${bonus} —Ç–æ–∫–µ–Ω–æ–≤!`);
            
            createParticles();
            playSound('evolution');
            checkAchievements();
            
            break;
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–æ–≤ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
function updateStatsOverTime(seconds) {
    const minutes = Math.floor(seconds / 60);
    
    if (minutes > 0) {
        gameState.hunger = Math.max(0, gameState.hunger - minutes * 0.5);
        gameState.happiness = Math.max(0, gameState.happiness - minutes * 0.3);
        gameState.energy = Math.max(0, gameState.energy - minutes * 0.2);
        
        if (gameState.hunger < 30 || gameState.happiness < 30) {
            gameState.health = Math.max(0, gameState.health - minutes * 0.4);
        }
    }
}

// –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
function startGameLoop() {
    setInterval(() => {
        gameState.hunger = Math.max(0, gameState.hunger - 0.1);
        gameState.happiness = Math.max(0, gameState.happiness - 0.05);
        gameState.energy = Math.max(0, gameState.energy - 0.03);
        
        if (gameState.hunger < 30 || gameState.happiness < 30) {
            gameState.health = Math.max(0, gameState.health - 0.08);
        }
        
        updateDisplay();
        
        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if (gameState.hunger < 20 && Math.random() < 0.1) {
            showNotification("üçñ –ü–∏—Ç–æ–º–µ—Ü –≥–æ–ª–æ–¥–µ–Ω!");
        }
        if (gameState.happiness < 20 && Math.random() < 0.1) {
            showNotification("üò¢ –ü–∏—Ç–æ–º—Ü—É —Å–∫—É—á–Ω–æ!");
        }
        if (gameState.health < 30 && Math.random() < 0.1) {
            showNotification("üíî –ü–∏—Ç–æ–º–µ—Ü –Ω–µ–∑–¥–æ—Ä–æ–≤!");
        }
        
        saveGame();
    }, 3000);
    
    // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
    setInterval(() => {
        gameState.age++;
        updateDisplay();
        
        if (gameState.age >= 7) {
            achievements.week.progress = gameState.age;
            checkAchievements();
        }
        
        saveGame();
    }, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É = 1 –¥–µ–Ω—å
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function updateDisplay() {
    const stage = stages[gameState.stage];
    
    document.getElementById('petSprite').textContent = stage.sprite;
    document.getElementById('petName').textContent = gameState.petName;
    document.getElementById('petLevel').textContent = `–£—Ä–æ–≤–µ–Ω—å ${gameState.level} ‚Ä¢ ${stage.name}`;
    
    updateStatBar('healthBar', gameState.health);
    updateStatBar('hungerBar', gameState.hunger);
    updateStatBar('happinessBar', gameState.happiness);
    updateStatBar('energyBar', gameState.energy);
    
    document.getElementById('tokenBalance').textContent = Math.floor(gameState.tokens);
    
    const nextStage = stages[gameState.stage + 1];
    const expRequired = nextStage ? nextStage.expRequired : "MAX";
    document.getElementById('experience').textContent = 
        expRequired === "MAX" ? `${gameState.experience} (MAX)` : `${gameState.experience} / ${expRequired}`;
    
    document.getElementById('age').textContent = `${gameState.age} –¥–Ω–µ–π`;
    document.getElementById('earnedTokens').textContent = gameState.earnedTokens;
    document.getElementById('actionStreak').textContent = gameState.actionStreak;
    
    updateMood();
}

function updateStatBar(id, value) {
    const bar = document.getElementById(id);
    bar.style.width = value + '%';
    bar.textContent = Math.floor(value) + '%';
}

function showNotification(message) {
    const notification = document.getElementById('notification');
    notification.textContent = message;
    notification.classList.add('show');
    
    setTimeout(() => {
        notification.classList.remove('show');
    }, 3000);
}

function showEmotion(emoji) {
    const emotion = document.createElement('div');
    emotion.className = 'emotion';
    emotion.textContent = emoji;
    
    const petDisplay = document.getElementById('petDisplay');
    const rect = petDisplay.getBoundingClientRect();
    
    emotion.style.left = (Math.random() * rect.width) + 'px';
    emotion.style.top = '50%';
    
    petDisplay.appendChild(emotion);
    
    setTimeout(() => {
        emotion.remove();
    }, 2000);
}

// –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã (–∑–∞–≥–ª—É—à–∫–∞)
function playSound(type) {
    // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∑–≤—É–∫–∏
    console.log(`üîä Sound: ${type}`);
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã
function saveGame() {
    gameState.lastUpdate = Date.now();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const saveData = {
        ...gameState,
        achievements: achievements
    };
    
    localStorage.setItem('cryptoTamagotchiEnhanced', JSON.stringify(saveData));
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã
function loadGame() {
    const saved = localStorage.getItem('cryptoTamagotchiEnhanced');
    if (saved) {
        const loaded = JSON.parse(saved);
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        Object.keys(gameState).forEach(key => {
            if (loaded[key] !== undefined) {
                gameState[key] = loaded[key];
            }
        });
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        if (loaded.achievements) {
            Object.keys(loaded.achievements).forEach(key => {
                if (achievements[key]) {
                    Object.assign(achievements[key], loaded.achievements[key]);
                }
            });
        }
        
        // –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è
        const timePassed = Math.floor((Date.now() - gameState.lastUpdate) / 1000);
        updateStatsOverTime(timePassed);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.addEventListener('load', () => {
    loadGame();
    
    if (gameState.stage > 0) {
        document.getElementById('startScreen').style.display = 'none';
        document.getElementById('gameScreen').style.display = 'block';
        initAchievements();
        updateDisplay();
        startGameLoop();
    }
    
    // –ê–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Phantom –µ—Å–ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
    if (window.solana && window.solana.isPhantom && window.solana.isConnected) {
        window.solana.connect({ onlyIfTrusted: true })
            .then(async (response) => {
                const publicKey = response.publicKey.toString();
                gameState.walletConnected = true;
                document.getElementById('connectWallet').style.display = 'none';
                document.getElementById('walletInfo').style.display = 'block';
                document.getElementById('walletInfo').innerHTML = `
                    ‚úÖ ${publicKey.slice(0, 4)}...${publicKey.slice(-4)}
                `;
            })
            .catch(() => {});
    }
});

window.addEventListener('beforeunload', () => {
    saveGame();
});













