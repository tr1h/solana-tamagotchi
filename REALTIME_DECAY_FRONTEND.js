// ============================================================================
// üé® –†–ï–ê–õ–¨–ù–û–ï –í–†–ï–ú–Ø DECAY (–¢–û–õ–¨–ö–û –ù–ê –§–†–û–ù–¢–ï–ù–î–ï!)
// ============================================================================

// –î–∞–Ω–Ω—ã–µ –ø–∏—Ç–æ–º—Ü–∞ –∏–∑ blockchain
let petData = {
    hunger: 100,
    happiness: 100,
    energy: 100,
    health: 100,
    last_decay_time: Date.now() / 1000, // unix timestamp
    is_alive: true
};

// ============================================================================
// –í–ò–†–¢–£–ê–õ–¨–ù–´–ô DECAY - –†–ê–°–°–ß–ò–¢–´–í–ê–ï–¢–°–Ø –ù–ê –§–†–û–ù–¢–ï–ù–î–ï
// ============================================================================

function calculateVirtualStats(pet) {
    const now = Date.now() / 1000; // —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    const timePassed = now - pet.last_decay_time;
    
    // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã - –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º
    if (timePassed < 60) {
        return {
            hunger: pet.hunger,
            happiness: pet.happiness,
            energy: pet.energy,
            health: pet.health,
            is_alive: pet.is_alive
        };
    }
    
    // –°—á–∏—Ç–∞–µ–º decay
    const decay_cycles = Math.floor(timePassed / 60);
    
    let virtualHunger = Math.max(0, pet.hunger - decay_cycles);
    let virtualHappiness = Math.max(0, pet.happiness - Math.floor(decay_cycles / 2));
    let virtualEnergy = Math.max(0, pet.energy - Math.floor(decay_cycles / 3));
    let virtualHealth = pet.health;
    
    // –ï—Å–ª–∏ –≥–æ–ª–æ–¥ –∏–ª–∏ —Å—á–∞—Å—Ç—å–µ –∫—Ä–∏—Ç–∏—á–Ω–æ - –∑–¥–æ—Ä–æ–≤—å–µ –ø–∞–¥–∞–µ—Ç
    if (virtualHunger < 30 || virtualHappiness < 30) {
        virtualHealth = Math.max(0, virtualHealth - Math.floor(decay_cycles / 2));
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–µ—Ä—Ç—å
    const virtualAlive = virtualHealth > 0;
    
    return {
        hunger: virtualHunger,
        happiness: virtualHappiness,
        energy: virtualEnergy,
        health: virtualHealth,
        is_alive: virtualAlive
    };
}

// ============================================================================
// –û–ë–ù–û–í–õ–ï–ù–ò–ï UI –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò
// ============================================================================

function updateRealtimeUI() {
    // –ü–æ–ª—É—á–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—ã (–±–µ–∑ blockchain!)
    const virtualStats = calculateVirtualStats(petData);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    updateStatBar('hungerBar', virtualStats.hunger);
    updateStatBar('happinessBar', virtualStats.happiness);
    updateStatBar('energyBar', virtualStats.energy);
    updateStatBar('healthBar', virtualStats.health);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    if (virtualStats.hunger < 30) {
        showWarning('‚ö†Ô∏è –ü–∏—Ç–æ–º–µ—Ü –≥–æ–ª–æ–¥–µ–Ω!');
    }
    if (virtualStats.happiness < 30) {
        showWarning('‚ö†Ô∏è –ü–∏—Ç–æ–º–µ—Ü –≥—Ä—É—Å—Ç–Ω—ã–π!');
    }
    if (virtualStats.health < 50) {
        showWarning('üíî –ó–¥–æ—Ä–æ–≤—å–µ –Ω–∏–∑–∫–æ–µ!');
    }
    if (!virtualStats.is_alive) {
        showWarning('üíÄ –ü–ò–¢–û–ú–ï–¶ –ú–Å–†–¢–í!');
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ decay
    const timeSinceLastDecay = (Date.now() / 1000) - petData.last_decay_time;
    const secondsToNextDecay = 60 - (timeSinceLastDecay % 60);
    document.getElementById('nextDecayTimer').textContent = 
        `–°–ª–µ–¥—É—é—â–∏–π decay —á–µ—Ä–µ–∑ ${Math.floor(secondsToNextDecay)}—Å`;
}

// –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É!
setInterval(updateRealtimeUI, 1000);

// ============================================================================
// –ö–û–ì–î–ê –î–ï–õ–ê–ï–ú –î–ï–ô–°–¢–í–ò–ï - –û–ë–ù–û–í–õ–Ø–ï–ú –î–ê–ù–ù–´–ï –ò–ó BLOCKCHAIN
// ============================================================================

async function feedPet() {
    // 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const signature = await sendFeedTransaction();
    
    // 2. –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ blockchain
    const accountInfo = await connection.getAccountInfo(petPubkey);
    petData = deserializePet(accountInfo.data);
    
    // 3. UI –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ setInterval!
}

// ============================================================================
// –ü–†–û–ì–ù–û–ó –°–ú–ï–†–¢–ò
// ============================================================================

function predictDeath(pet) {
    let virtualPet = { ...pet };
    let minutes = 0;
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º decay –¥–æ —Å–º–µ—Ä—Ç–∏
    while (virtualPet.health > 0 && minutes < 10000) {
        minutes++;
        
        virtualPet.hunger = Math.max(0, virtualPet.hunger - 1);
        virtualPet.happiness = Math.max(0, virtualPet.happiness - 0.5);
        virtualPet.energy = Math.max(0, virtualPet.energy - 0.33);
        
        if (virtualPet.hunger < 30 || virtualPet.happiness < 30) {
            virtualPet.health = Math.max(0, virtualPet.health - 0.5);
        }
    }
    
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    
    return `üíÄ –ü–∏—Ç–æ–º–µ—Ü —É–º—Ä—ë—Ç —á–µ—Ä–µ–∑ ~${hours}—á ${mins}–º –µ—Å–ª–∏ –Ω–µ —É—Ö–∞–∂–∏–≤–∞—Ç—å`;
}

// ============================================================================
// –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò
// ============================================================================

function getRecommendations(virtualStats) {
    const recommendations = [];
    
    if (virtualStats.hunger < 70) {
        recommendations.push({
            action: 'üçñ –ö–æ—Ä–º–∏—Ç—å',
            urgency: virtualStats.hunger < 30 ? 'critical' : 'medium',
            cost: '5 TAMA'
        });
    }
    
    if (virtualStats.happiness < 70) {
        recommendations.push({
            action: 'üéÆ –ò–≥—Ä–∞—Ç—å',
            urgency: virtualStats.happiness < 30 ? 'critical' : 'medium',
            cost: '3 TAMA'
        });
    }
    
    if (virtualStats.energy < 60) {
        recommendations.push({
            action: 'üò¥ –û—Ç–¥–æ—Ö–Ω—É—Ç—å',
            urgency: virtualStats.energy < 30 ? 'high' : 'low',
            cost: '2 TAMA'
        });
    }
    
    if (virtualStats.health < 50) {
        recommendations.push({
            action: 'üíä –õ–µ—á–∏—Ç—å',
            urgency: 'critical',
            cost: '8 TAMA'
        });
    }
    
    return recommendations;
}

// ============================================================================
// –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ë–†–ê–£–ó–ï–†–ê
// ============================================================================

async function setupBrowserNotifications() {
    // –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    if (Notification.permission === 'default') {
        await Notification.requestPermission();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    setInterval(() => {
        const virtualStats = calculateVirtualStats(petData);
        
        if (virtualStats.hunger < 30 && Notification.permission === 'granted') {
            new Notification('üçñ Tamagotchi –≥–æ–ª–æ–¥–µ–Ω!', {
                body: `Hunger: ${virtualStats.hunger}. –ü–æ–∫–æ—Ä–º–∏ —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!`,
                icon: 'üê£'
            });
        }
        
        if (virtualStats.health < 30 && Notification.permission === 'granted') {
            new Notification('üíî Tamagotchi –ø—Ä–∏ —Å–º–µ—Ä—Ç–∏!', {
                body: `Health: ${virtualStats.health}. –°–†–û–ß–ù–û –ø–æ–∑–∞–±–æ—Ç—å—Å—è –æ –Ω—ë–º!`,
                icon: 'üíÄ'
            });
        }
    }, 60000); // –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
}

// ============================================================================
// –ì–†–ê–§–ò–ö –°–¢–ê–¢–û–í
// ============================================================================

function drawStatsChart(pet) {
    const canvas = document.getElementById('statsChart');
    const ctx = canvas.getContext('2d');
    
    // –†–∏—Å—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å
    const predictions = [];
    let virtualPet = { ...pet };
    
    for (let minute = 0; minute <= 60; minute++) {
        predictions.push({
            minute,
            hunger: virtualPet.hunger,
            happiness: virtualPet.happiness,
            energy: virtualPet.energy,
            health: virtualPet.health
        });
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º decay
        virtualPet.hunger = Math.max(0, virtualPet.hunger - 1);
        virtualPet.happiness = Math.max(0, virtualPet.happiness - 0.5);
        virtualPet.energy = Math.max(0, virtualPet.energy - 0.33);
        
        if (virtualPet.hunger < 30 || virtualPet.happiness < 30) {
            virtualPet.health = Math.max(0, virtualPet.health - 0.5);
        }
    }
    
    // –†–∏—Å—É–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
    // ... (–∫–æ–¥ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è)
}

// ============================================================================
// –≠–ö–°–ü–û–†–¢
// ============================================================================

export {
    calculateVirtualStats,
    updateRealtimeUI,
    predictDeath,
    getRecommendations,
    setupBrowserNotifications,
    drawStatsChart
};


