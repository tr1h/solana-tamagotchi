use anchor_lang::prelude::*;

// ‚ö†Ô∏è –≠—Ç–æ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–æ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ –≤ Playground
declare_id!("11111111111111111111111111111111");

#[program]
pub mod tamagotchi {
    use super::*;

    /// üÜì –°–æ–∑–¥–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ (instruction 0)
    pub fn create_pet(ctx: Context<CreatePet>) -> Result<()> {
        let pet = &mut ctx.accounts.pet;
        let owner = ctx.accounts.owner.key();
        let clock = Clock::get()?;

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º DNA –∏–∑ wallet address
        let wallet_bytes = owner.to_bytes();
        let mut hash: u64 = 0;
        for (i, &byte) in wallet_bytes.iter().enumerate() {
            hash = hash.wrapping_add((byte as u64).wrapping_shl((i % 8) as u32));
        }

        // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ DNA
        let pet_id = (hash % 100000) as u32;
        let species = ((hash >> 8) % 10) as u8;
        let accessory = ((hash >> 16) % 10) as u8;
        let background = ((hash >> 24) % 8) as u8;
        
        // –†–µ–¥–∫–æ—Å—Ç—å
        let rarity_roll = (hash % 100) as u8;
        let rarity = if rarity_roll >= 99 {
            4 // Legendary (1%)
        } else if rarity_roll >= 97 {
            3 // Epic (2%)
        } else if rarity_roll >= 90 {
            2 // Rare (7%)
        } else if rarity_roll >= 70 {
            1 // Uncommon (20%)
        } else {
            0 // Common (70%)
        };

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∏—Ç–æ–º—Ü–∞
        pet.owner = owner;
        pet.dna = hash;
        pet.pet_id = pet_id;
        pet.species = species;
        pet.accessory = accessory;
        pet.background = background;
        pet.rarity = rarity;
        pet.level = 1;
        pet.health = 100;
        pet.hunger = 100;
        pet.happiness = 100;
        pet.energy = 100;
        pet.thirst = 100;
        pet.birth_time = clock.unix_timestamp;
        pet.last_fed = clock.unix_timestamp;
        pet.last_played = clock.unix_timestamp;
        pet.last_slept = clock.unix_timestamp;
        pet.is_alive = true;
        pet.lives = 3;
        pet.bump = ctx.bumps.pet;

        msg!("üê£ –ü–∏—Ç–æ–º–µ—Ü #{} —Å–æ–∑–¥–∞–Ω! –í–∏–¥: {}, –†–µ–¥–∫–æ—Å—Ç—å: {}", pet_id, species, rarity);
        Ok(())
    }

    /// üçñ –ö–æ—Ä–º–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞ (instruction 1)
    pub fn feed_pet(ctx: Context<ActionPet>) -> Result<()> {
        let pet = &mut ctx.accounts.pet;
        let clock = Clock::get()?;

        require!(pet.is_alive, ErrorCode::PetIsDead);
        require!(pet.owner == ctx.accounts.owner.key(), ErrorCode::NotOwner);

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≥–æ–ª–æ–¥
        pet.hunger = std::cmp::min(pet.hunger + 30, 100);
        pet.last_fed = clock.unix_timestamp;

        // –ù–µ–±–æ–ª—å—à–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è
        if pet.hunger > 80 {
            pet.health = std::cmp::min(pet.health + 5, 100);
        }

        msg!("üçñ –ü–∏—Ç–æ–º–µ—Ü –ø–æ–∫–æ—Ä–º–ª–µ–Ω! Hunger: {}", pet.hunger);
        Ok(())
    }

    /// üéÆ –ò–≥—Ä–∞—Ç—å —Å –ø–∏—Ç–æ–º—Ü–µ–º (instruction 2)
    pub fn play_with_pet(ctx: Context<ActionPet>) -> Result<()> {
        let pet = &mut ctx.accounts.pet;
        let clock = Clock::get()?;

        require!(pet.is_alive, ErrorCode::PetIsDead);
        require!(pet.owner == ctx.accounts.owner.key(), ErrorCode::NotOwner);

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–∞—Å—Ç—å–µ, —É–º–µ–Ω—å—à–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é
        pet.happiness = std::cmp::min(pet.happiness + 25, 100);
        pet.energy = pet.energy.saturating_sub(15);
        pet.last_played = clock.unix_timestamp;

        msg!("üéÆ –ò–≥—Ä–∞–ª–∏ —Å –ø–∏—Ç–æ–º—Ü–µ–º! Happiness: {}, Energy: {}", pet.happiness, pet.energy);
        Ok(())
    }

    /// üíä –õ–µ—á–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞ (instruction 3)
    pub fn heal_pet(ctx: Context<ActionPet>) -> Result<()> {
        let pet = &mut ctx.accounts.pet;

        require!(pet.is_alive, ErrorCode::PetIsDead);
        require!(pet.owner == ctx.accounts.owner.key(), ErrorCode::NotOwner);

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
        pet.health = std::cmp::min(pet.health + 30, 100);

        msg!("üíä –ü–∏—Ç–æ–º–µ—Ü –≤—ã–ª–µ—á–µ–Ω! Health: {}", pet.health);
        Ok(())
    }

    /// üò¥ –û—Ç–¥—ã—Ö –ø–∏—Ç–æ–º—Ü–∞ (instruction 4)
    pub fn rest_pet(ctx: Context<ActionPet>) -> Result<()> {
        let pet = &mut ctx.accounts.pet;
        let clock = Clock::get()?;

        require!(pet.is_alive, ErrorCode::PetIsDead);
        require!(pet.owner == ctx.accounts.owner.key(), ErrorCode::NotOwner);

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é
        pet.energy = std::cmp::min(pet.energy + 40, 100);
        pet.last_slept = clock.unix_timestamp;

        msg!("üò¥ –ü–∏—Ç–æ–º–µ—Ü –æ—Ç–¥—ã—Ö–∞–µ—Ç! Energy: {}", pet.energy);
        Ok(())
    }

    /// ‚ú® –í–æ—Å–∫—Ä–µ—Å–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞ (instruction 5)
    pub fn resurrect_pet(ctx: Context<ResurrectPet>) -> Result<()> {
        let pet = &mut ctx.accounts.pet;
        let clock = Clock::get()?;

        require!(!pet.is_alive, ErrorCode::PetIsAlive);
        require!(pet.owner == ctx.accounts.owner.key(), ErrorCode::NotOwner);
        require!(pet.lives > 0, ErrorCode::NoLivesLeft);

        // –í–æ—Å–∫—Ä–µ—à–∞–µ–º –ø–∏—Ç–æ–º—Ü–∞
        pet.is_alive = true;
        pet.health = 50;
        pet.hunger = 50;
        pet.happiness = 50;
        pet.energy = 50;
        pet.thirst = 50;
        pet.lives -= 1;
        pet.last_fed = clock.unix_timestamp;
        pet.last_played = clock.unix_timestamp;
        pet.last_slept = clock.unix_timestamp;

        msg!("‚ú® –ü–∏—Ç–æ–º–µ—Ü –≤–æ—Å–∫—Ä–µ—à–µ–Ω! –û—Å—Ç–∞–ª–æ—Å—å –∂–∏–∑–Ω–µ–π: {}", pet.lives);
        Ok(())
    }

    /// üóëÔ∏è –ó–∞–∫—Ä—ã—Ç—å –∞–∫–∫–∞—É–Ω—Ç –ø–∏—Ç–æ–º—Ü–∞ (instruction 6)
    pub fn close_pet(ctx: Context<ClosePet>) -> Result<()> {
        let pet = &ctx.accounts.pet;
        require!(pet.owner == ctx.accounts.owner.key(), ErrorCode::NotOwner);
        
        msg!("üóëÔ∏è –ü–∏—Ç–æ–º–µ—Ü #{} –∑–∞–∫—Ä—ã—Ç", pet.pet_id);
        Ok(())
    }

    /// ‚è∞ –û–±–Ω–æ–≤–∏—Ç—å decay (instruction 7)
    pub fn update_decay(ctx: Context<UpdateDecay>) -> Result<()> {
        let pet = &mut ctx.accounts.pet;
        let clock = Clock::get()?;

        let time_passed = clock.unix_timestamp - pet.last_slept;
        if time_passed < 60 {
            return Ok(()); // –ú–∏–Ω–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
        }

        // Decay –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        let decay_cycles = (time_passed / 60) as u8;

        // –£–º–µ–Ω—å—à–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        pet.hunger = pet.hunger.saturating_sub(decay_cycles);
        pet.happiness = pet.happiness.saturating_sub(decay_cycles);
        pet.energy = pet.energy.saturating_sub(decay_cycles);
        pet.thirst = pet.thirst.saturating_sub(decay_cycles);

        // –ï—Å–ª–∏ –Ω–∏–∑–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - —É–º–µ–Ω—å—à–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
        if pet.hunger < 20 || pet.happiness < 20 || pet.energy < 20 || pet.thirst < 20 {
            pet.health = pet.health.saturating_sub(decay_cycles);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ—Ä—Ç–∏
        if pet.health == 0 && pet.is_alive {
            pet.is_alive = false;
            msg!("üíÄ –ü–∏—Ç–æ–º–µ—Ü #{} —É–º–µ—Ä! –û—Å—Ç–∞–ª–æ—Å—å –∂–∏–∑–Ω–µ–π: {}", pet.pet_id, pet.lives);
        }

        msg!("‚è∞ Decay –æ–±–Ω–æ–≤–ª–µ–Ω. Health: {}, Hunger: {}", pet.health, pet.hunger);
        Ok(())
    }
}

// ============================================================================
// Contexts
// ============================================================================

#[derive(Accounts)]
pub struct CreatePet<'info> {
    #[account(
        init,
        payer = owner,
        space = 8 + Pet::INIT_SPACE,
        seeds = [b"pet", owner.key().as_ref()],
        bump
    )]
    pub pet: Account<'info, Pet>,
    #[account(mut)]
    pub owner: Signer<'info>,
    pub system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct ActionPet<'info> {
    #[account(
        mut,
        seeds = [b"pet", owner.key().as_ref()],
        bump = pet.bump
    )]
    pub pet: Account<'info, Pet>,
    pub owner: Signer<'info>,
}

#[derive(Accounts)]
pub struct ResurrectPet<'info> {
    #[account(
        mut,
        seeds = [b"pet", owner.key().as_ref()],
        bump = pet.bump
    )]
    pub pet: Account<'info, Pet>,
    #[account(mut)]
    pub owner: Signer<'info>,
}

#[derive(Accounts)]
pub struct ClosePet<'info> {
    #[account(
        mut,
        close = owner,
        seeds = [b"pet", owner.key().as_ref()],
        bump = pet.bump
    )]
    pub pet: Account<'info, Pet>,
    #[account(mut)]
    pub owner: Signer<'info>,
}

#[derive(Accounts)]
pub struct UpdateDecay<'info> {
    #[account(
        mut,
        seeds = [b"pet", pet.owner.as_ref()],
        bump = pet.bump
    )]
    pub pet: Account<'info, Pet>,
}

// ============================================================================
// Account
// ============================================================================

#[account]
#[derive(InitSpace)]
pub struct Pet {
    pub owner: Pubkey,        // 32 bytes
    pub dna: u64,             // 8 bytes
    pub pet_id: u32,          // 4 bytes
    pub species: u8,          // 1 byte (0-9)
    pub accessory: u8,        // 1 byte (0-9)
    pub background: u8,       // 1 byte (0-7)
    pub rarity: u8,           // 1 byte (0-4: Common, Uncommon, Rare, Epic, Legendary)
    pub level: u8,            // 1 byte
    pub health: u8,           // 1 byte (0-100)
    pub hunger: u8,           // 1 byte (0-100)
    pub happiness: u8,        // 1 byte (0-100)
    pub energy: u8,           // 1 byte (0-100)
    pub thirst: u8,           // 1 byte (0-100)
    pub birth_time: i64,      // 8 bytes
    pub last_fed: i64,        // 8 bytes
    pub last_played: i64,     // 8 bytes
    pub last_slept: i64,      // 8 bytes
    pub is_alive: bool,       // 1 byte
    pub lives: u8,            // 1 byte (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–µ–π: 0-3)
    pub bump: u8,             // 1 byte
}

// ============================================================================
// Errors
// ============================================================================

#[error_code]
pub enum ErrorCode {
    #[msg("Pet is already dead")]
    PetIsDead,
    #[msg("Pet is alive")]
    PetIsAlive,
    #[msg("You are not the owner of this pet")]
    NotOwner,
    #[msg("No lives left")]
    NoLivesLeft,
}








