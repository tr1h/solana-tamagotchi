"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –¥–µ–ø–ª–æ—è —Ç–æ–∫–µ–Ω–∞ TAMA –≤ Solana Devnet
"""

import json
import base58
from solana.rpc.api import Client
from solana.keypair import Keypair
from solana.transaction import Transaction
from solders.system_program import TransferParams, transfer
from spl.token.instructions import (
    initialize_mint,
    InitializeMintParams,
    create_associated_token_account,
    get_associated_token_address,
    mint_to,
    MintToParams,
)
from spl.token.constants import TOKEN_PROGRAM_ID
from solders.pubkey import Pubkey
import time

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Devnet
DEVNET_URL = "https://api.devnet.solana.com"
client = Client(DEVNET_URL)

print("üöÄ Crypto Tamagotchi Token Deployment Script")
print("=" * 50)
print(f"üì° Connected to: {DEVNET_URL}\n")


def create_wallet():
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π"""
    try:
        with open('wallet.json', 'r') as f:
            wallet_data = json.load(f)
            keypair = Keypair.from_bytes(bytes(wallet_data))
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ—à–µ–ª–µ–∫: {keypair.pubkey()}")
            return keypair
    except FileNotFoundError:
        keypair = Keypair()
        with open('wallet.json', 'w') as f:
            json.dump(list(keypair.secret()), f)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫: {keypair.pubkey()}")
        print(f"üíæ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ wallet.json")
        return keypair


def request_airdrop(pubkey, amount=2):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å airdrop SOL –≤ devnet"""
    print(f"\nüí∞ –ó–∞–ø—Ä–æ—Å airdrop {amount} SOL...")
    try:
        response = client.request_airdrop(pubkey, amount * 10**9)
        print(f"‚úÖ Airdrop —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {response.value}")
        
        # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        time.sleep(10)
        
        balance = client.get_balance(pubkey).value / 10**9
        print(f"üíµ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {balance} SOL")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ airdrop: {e}")
        return False


def create_token_mint(payer: Keypair, decimals=9):
    """–°–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω mint"""
    print("\nü™ô –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ TAMA...")
    
    mint_keypair = Keypair()
    
    print(f"üìù Token Mint Address: {mint_keypair.pubkey()}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º mint keypair
    with open('token_mint.json', 'w') as f:
        json.dump({
            'mint': str(mint_keypair.pubkey()),
            'decimals': decimals,
            'secret': list(mint_keypair.secret())
        }, f, indent=2)
    
    print(f"‚úÖ Token mint —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ token_mint.json")
    
    return mint_keypair


def create_token_account(client: Client, payer: Keypair, mint: Pubkey):
    """–°–æ–∑–¥–∞—Ç—å token account –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞"""
    print("\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ token account...")
    
    token_account = get_associated_token_address(payer.pubkey(), mint)
    print(f"üìù Token Account: {token_account}")
    
    return token_account


def mint_tokens(client: Client, mint_keypair: Keypair, destination: Pubkey, amount: int):
    """–ú–∏–Ω—Ç —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∞–¥—Ä–µ—Å"""
    print(f"\n‚ö° –ú–∏–Ω—Ç {amount} —Ç–æ–∫–µ–Ω–æ–≤...")
    
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –º–∏–Ω—Ç–∞ —á–µ—Ä–µ–∑ SPL Token Program
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–º–∏–Ω—á–µ–Ω–æ {amount} TAMA —Ç–æ–∫–µ–Ω–æ–≤")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–Ω—Ç–∞: {e}")
        return False


def save_config(wallet_pubkey: str, mint_pubkey: str, token_account: str):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∏–≥—Ä–µ"""
    config = {
        "network": "devnet",
        "wallet": wallet_pubkey,
        "tokenMint": mint_pubkey,
        "tokenAccount": token_account,
        "decimals": 9,
        "symbol": "TAMA",
        "name": "Crypto Tamagotchi",
        "totalSupply": 1000000000,
        "rpcUrl": DEVNET_URL
    }
    
    with open('devnet_config.json', 'w') as f:
        json.dump(config, f, indent=2)
    
    print("\nüíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ devnet_config.json")
    print("\nüìã –î–µ—Ç–∞–ª–∏ —Ç–æ–∫–µ–Ω–∞:")
    print(f"   Token Mint: {mint_pubkey}")
    print(f"   Token Account: {token_account}")
    print(f"   Network: Devnet")
    print(f"   RPC: {DEVNET_URL}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–ø–ª–æ—è"""
    
    print("\nüîß –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ—à–µ–ª—å–∫–∞")
    payer = create_wallet()
    
    print("\nüîß –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ SOL")
    balance = client.get_balance(payer.pubkey()).value / 10**9
    print(f"üíµ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} SOL")
    
    if balance < 0.1:
        print("‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SOL –¥–ª—è –¥–µ–ø–ª–æ—è")
        request_airdrop(payer.pubkey(), 2)
    
    print("\nüîß –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞")
    mint_keypair = create_token_mint(payer, decimals=9)
    
    print("\nüîß –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ token account")
    token_account = create_token_account(client, payer, mint_keypair.pubkey())
    
    print("\nüîß –®–∞–≥ 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    save_config(
        str(payer.pubkey()),
        str(mint_keypair.pubkey()),
        str(token_account)
    )
    
    print("\n" + "=" * 50)
    print("‚úÖ –î–ï–ü–õ–û–ô –ó–ê–í–ï–†–®–ï–ù!")
    print("=" * 50)
    print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ devnet_config.json –≤ –≤–∞—à–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
    print("2. –û—Ç–∫—Ä–æ–π—Ç–µ tamagotchi_devnet.html –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("3. –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ Phantom –Ω–∞ Devnet –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
    print("4. –ü–æ–ª—É—á–∏—Ç–µ devnet SOL: https://faucet.solana.com/")
    print("\nüéÆ –ì–æ—Ç–æ–≤–æ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!")


if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        print("\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:")
        print("   - –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        print("   - –ï—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
        print("   - Solana devnet –¥–æ—Å—Ç—É–ø–µ–Ω")

