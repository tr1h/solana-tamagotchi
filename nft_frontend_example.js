/**
 * üé® –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ NFT –ø–∏—Ç–æ–º—Ü–µ–≤ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–π Anchor Web3.js –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º
 */

import * as anchor from '@project-serum/anchor';
import { Program } from '@project-serum/anchor';
import { 
  PublicKey, 
  SystemProgram, 
  SYSVAR_RENT_PUBKEY,
  Keypair
} from '@solana/web3.js';
import { 
  TOKEN_PROGRAM_ID, 
  ASSOCIATED_TOKEN_PROGRAM_ID,
  getAssociatedTokenAddress
} from '@solana/spl-token';

// Metaplex Token Metadata Program ID
const TOKEN_METADATA_PROGRAM_ID = new PublicKey('metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');

/**
 * üê£ –°–æ–∑–¥–∞—Ç—å NFT –ø–∏—Ç–æ–º—Ü–∞
 */
async function createPetNFT(program, wallet) {
  try {
    console.log('üê£ –°–æ–∑–¥–∞–µ–º NFT –ø–∏—Ç–æ–º—Ü–∞...');

    // 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π mint –¥–ª—è NFT
    const nftMint = Keypair.generate();
    
    // 2. –ü–æ–ª—É—á–∞–µ–º PDA –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–∏—Ç–æ–º—Ü–∞
    const [petPDA] = await PublicKey.findProgramAddress(
      [
        Buffer.from('pet'),
        wallet.publicKey.toBuffer()
      ],
      program.programId
    );

    // 3. –ü–æ–ª—É—á–∞–µ–º associated token account –¥–ª—è NFT
    const nftTokenAccount = await getAssociatedTokenAddress(
      nftMint.publicKey,
      wallet.publicKey
    );

    // 4. –ü–æ–ª—É—á–∞–µ–º PDA –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (Metaplex)
    const [metadataPDA] = await PublicKey.findProgramAddress(
      [
        Buffer.from('metadata'),
        TOKEN_METADATA_PROGRAM_ID.toBuffer(),
        nftMint.publicKey.toBuffer()
      ],
      TOKEN_METADATA_PROGRAM_ID
    );

    // 5. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    const petName = "–ú–æ–π –¢–∞–º–∞–≥–æ—á–∏";
    
    // URI –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ JSON —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    // –ó–∞–≥—Ä—É–∑–∏ JSON –Ω–∞ IPFS/Arweave —Å–Ω–∞—á–∞–ª–∞!
    const metadataUri = "https://ipfs.io/ipfs/YOUR_CID/metadata.json";

    // 6. –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è NFT
    const tx = await program.methods
      .createPetNft(petName, metadataUri)
      .accounts({
        pet: petPDA,
        owner: wallet.publicKey,
        nftMint: nftMint.publicKey,
        nftTokenAccount: nftTokenAccount,
        metadata: metadataPDA,
        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,
        tokenProgram: TOKEN_PROGRAM_ID,
        associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,
        systemProgram: SystemProgram.programId,
        rent: SYSVAR_RENT_PUBKEY,
      })
      .signers([nftMint])
      .rpc();

    console.log('‚úÖ NFT –ø–∏—Ç–æ–º–µ—Ü —Å–æ–∑–¥–∞–Ω!');
    console.log('üîó Transaction:', tx);
    console.log('üé® NFT Mint:', nftMint.publicKey.toString());
    console.log('üì¶ Pet Account:', petPDA.toString());

    return {
      signature: tx,
      petAccount: petPDA,
      nftMint: nftMint.publicKey
    };

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è NFT:', error);
    throw error;
  }
}

/**
 * üìñ –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–∏—Ç–æ–º—Ü–∞
 */
async function getPetData(program, wallet) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º PDA –ø–∏—Ç–æ–º—Ü–∞
    const [petPDA] = await PublicKey.findProgramAddress(
      [
        Buffer.from('pet'),
        wallet.publicKey.toBuffer()
      ],
      program.programId
    );

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const petAccount = await program.account.pet.fetch(petPDA);

    console.log('üê£ –î–∞–Ω–Ω—ã–µ –ø–∏—Ç–æ–º—Ü–∞:');
    console.log('ID:', petAccount.petId);
    console.log('DNA:', petAccount.dna.toString());
    console.log('–í–∏–¥:', petAccount.species);
    console.log('–†–µ–¥–∫–æ—Å—Ç—å:', getRarityName(petAccount.rarity));
    console.log('–£—Ä–æ–≤–µ–Ω—å:', petAccount.level);
    console.log('–ó–¥–æ—Ä–æ–≤—å–µ:', petAccount.health);
    console.log('–ì–æ–ª–æ–¥:', petAccount.hunger);
    console.log('–°—á–∞—Å—Ç—å–µ:', petAccount.happiness);
    console.log('–≠–Ω–µ—Ä–≥–∏—è:', petAccount.energy);
    console.log('–ñ–∏–≤:', petAccount.isAlive);
    console.log('NFT Mint:', petAccount.nftMint.toString());

    return petAccount;

  } catch (error) {
    console.error('‚ùå –ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω:', error);
    return null;
  }
}

/**
 * üçñ –ü–æ–∫–æ—Ä–º–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞
 */
async function feedPet(program, wallet, tokenMint) {
  try {
    console.log('üçñ –ö–æ—Ä–º–∏–º –ø–∏—Ç–æ–º—Ü–∞...');

    const [petPDA] = await PublicKey.findProgramAddress(
      [Buffer.from('pet'), wallet.publicKey.toBuffer()],
      program.programId
    );

    // User's token account
    const userTokenAccount = await getAssociatedTokenAddress(
      tokenMint,
      wallet.publicKey
    );

    const tx = await program.methods
      .feedPet()
      .accounts({
        pet: petPDA,
        owner: wallet.publicKey,
        userTokenAccount: userTokenAccount,
        tokenMint: tokenMint,
        tokenProgram: TOKEN_PROGRAM_ID,
      })
      .rpc();

    console.log('‚úÖ –ü–∏—Ç–æ–º–µ—Ü –ø–æ–∫–æ—Ä–º–ª–µ–Ω! TX:', tx);
    return tx;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ—Ä–º–ª–µ–Ω–∏—è:', error);
    throw error;
  }
}

/**
 * üéÆ –ò–≥—Ä–∞—Ç—å —Å –ø–∏—Ç–æ–º—Ü–µ–º
 */
async function playWithPet(program, wallet, tokenMint) {
  try {
    console.log('üéÆ –ò–≥—Ä–∞–µ–º —Å –ø–∏—Ç–æ–º—Ü–µ–º...');

    const [petPDA] = await PublicKey.findProgramAddress(
      [Buffer.from('pet'), wallet.publicKey.toBuffer()],
      program.programId
    );

    const userTokenAccount = await getAssociatedTokenAddress(
      tokenMint,
      wallet.publicKey
    );

    const tx = await program.methods
      .playWithPet()
      .accounts({
        pet: petPDA,
        owner: wallet.publicKey,
        userTokenAccount: userTokenAccount,
        tokenMint: tokenMint,
        tokenProgram: TOKEN_PROGRAM_ID,
      })
      .rpc();

    console.log('‚úÖ –ü–æ–∏–≥—Ä–∞–ª–∏ —Å –ø–∏—Ç–æ–º—Ü–µ–º! TX:', tx);
    return tx;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–≥—Ä—ã:', error);
    throw error;
  }
}

/**
 * üíä –í—ã–ª–µ—á–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞
 */
async function healPet(program, wallet, tokenMint) {
  try {
    console.log('üíä –õ–µ—á–∏–º –ø–∏—Ç–æ–º—Ü–∞...');

    const [petPDA] = await PublicKey.findProgramAddress(
      [Buffer.from('pet'), wallet.publicKey.toBuffer()],
      program.programId
    );

    const userTokenAccount = await getAssociatedTokenAddress(
      tokenMint,
      wallet.publicKey
    );

    const tx = await program.methods
      .healPet()
      .accounts({
        pet: petPDA,
        owner: wallet.publicKey,
        userTokenAccount: userTokenAccount,
        tokenMint: tokenMint,
        tokenProgram: TOKEN_PROGRAM_ID,
      })
      .rpc();

    console.log('‚úÖ –ü–∏—Ç–æ–º–µ—Ü –≤—ã–ª–µ—á–µ–Ω! TX:', tx);
    return tx;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ª–µ—á–µ–Ω–∏—è:', error);
    throw error;
  }
}

/**
 * üò¥ –û—Ç–¥–æ—Ö–Ω—É—Ç—å
 */
async function restPet(program, wallet, tokenMint) {
  try {
    console.log('üò¥ –ü–∏—Ç–æ–º–µ—Ü –æ—Ç–¥—ã—Ö–∞–µ—Ç...');

    const [petPDA] = await PublicKey.findProgramAddress(
      [Buffer.from('pet'), wallet.publicKey.toBuffer()],
      program.programId
    );

    const userTokenAccount = await getAssociatedTokenAddress(
      tokenMint,
      wallet.publicKey
    );

    const tx = await program.methods
      .restPet()
      .accounts({
        pet: petPDA,
        owner: wallet.publicKey,
        userTokenAccount: userTokenAccount,
        tokenMint: tokenMint,
        tokenProgram: TOKEN_PROGRAM_ID,
      })
      .rpc();

    console.log('‚úÖ –ü–∏—Ç–æ–º–µ—Ü –æ—Ç–¥–æ—Ö–Ω—É–ª! TX:', tx);
    return tx;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–¥—ã—Ö–∞:', error);
    throw error;
  }
}

/**
 * ‚è∞ –û–±–Ω–æ–≤–∏—Ç—å decay
 */
async function updateDecay(program, wallet) {
  try {
    console.log('‚è∞ –û–±–Ω–æ–≤–ª—è–µ–º decay...');

    const [petPDA] = await PublicKey.findProgramAddress(
      [Buffer.from('pet'), wallet.publicKey.toBuffer()],
      program.programId
    );

    const tx = await program.methods
      .updateDecay()
      .accounts({
        pet: petPDA,
      })
      .rpc();

    console.log('‚úÖ Decay –æ–±–Ω–æ–≤–ª–µ–Ω! TX:', tx);
    return tx;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è decay:', error);
    throw error;
  }
}

/**
 * üé® –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–∞ IPFS
 * (–ò—Å–ø–æ–ª—å–∑—É–π Pinata –∏–ª–∏ nft.storage)
 */
async function uploadMetadataToIPFS(petData) {
  // –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
  const metadata = {
    name: `Tamagotchi #${petData.petId}`,
    symbol: "TAMA",
    description: "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫—Ä–∏–ø—Ç–æ-–ø–∏—Ç–æ–º–µ—Ü –Ω–∞ Solana",
    image: `https://YOUR_DOMAIN/images/pet_${petData.petId}.png`,
    attributes: [
      { trait_type: "DNA", value: petData.dna.toString() },
      { trait_type: "Pet ID", value: petData.petId.toString() },
      { trait_type: "Species", value: petData.species.toString() },
      { trait_type: "Rarity", value: getRarityName(petData.rarity) },
      { trait_type: "Level", value: petData.level.toString() },
      { trait_type: "Health", value: petData.health.toString(), max_value: "100" },
      { trait_type: "Is Alive", value: petData.isAlive ? "Yes" : "No" }
    ],
    properties: {
      category: "image",
      creators: [
        {
          address: "YOUR_WALLET",
          share: 100
        }
      ]
    }
  };

  // TODO: –†–µ–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ IPFS
  // –ò—Å–ø–æ–ª—å–∑—É–π Pinata SDK –∏–ª–∏ nft.storage
  console.log('üì¶ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:', JSON.stringify(metadata, null, 2));
  
  return "ipfs://YOUR_CID/metadata.json";
}

/**
 * üåü –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏
 */
function getRarityName(rarity) {
  const rarities = ['Common', 'Uncommon', 'Rare', 'Epic', 'Legendary'];
  return rarities[rarity] || 'Unknown';
}

/**
 * üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
 */
async function initProgram() {
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Solana
  const connection = new anchor.web3.Connection('https://api.devnet.solana.com');
  
  // Wallet (Phantom/Solflare)
  const wallet = window.solana;
  
  if (!wallet) {
    throw new Error('Phantom –∫–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
  }

  await wallet.connect();
  
  const provider = new anchor.AnchorProvider(
    connection,
    wallet,
    { commitment: 'confirmed' }
  );

  // –ó–∞–≥—Ä—É–∂–∞–µ–º IDL –∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
  const programId = new PublicKey('YOUR_PROGRAM_ID');
  const idl = await anchor.Program.fetchIdl(programId, provider);
  const program = new anchor.Program(idl, programId, provider);

  return { program, wallet, connection };
}

/**
 * üìä –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 */
async function main() {
  try {
    // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    const { program, wallet, connection } = await initProgram();
    
    console.log('üëõ –ö–æ—à–µ–ª–µ–∫:', wallet.publicKey.toString());

    // 2. –°–æ–∑–¥–∞—Ç—å NFT –ø–∏—Ç–æ–º—Ü–∞
    const result = await createPetNFT(program, wallet);
    
    // 3. –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–∏—Ç–æ–º—Ü–∞
    const petData = await getPetData(program, wallet);
    
    // 4. –ü–æ–∫–æ—Ä–º–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    const tokenMint = new PublicKey('YOUR_TOKEN_MINT');
    await feedPet(program, wallet, tokenMint);
    
    // 5. –û–±–Ω–æ–≤–∏—Ç—å decay
    await updateDecay(program, wallet);
    
    // 6. –ü–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const updatedData = await getPetData(program, wallet);
    
    console.log('üéâ –ì–æ—Ç–æ–≤–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
export {
  initProgram,
  createPetNFT,
  getPetData,
  feedPet,
  playWithPet,
  healPet,
  restPet,
  updateDecay,
  uploadMetadataToIPFS,
  getRarityName
};

// –ó–∞–ø—É—Å–∫ (–¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
// main();

