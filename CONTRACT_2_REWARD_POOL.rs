// üí∞ –ö–û–ù–¢–†–ê–ö–¢ 2: REWARD POOL
// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥–∞–º–∏ TAMA —Ç–æ–∫–µ–Ω–æ–≤

use anchor_lang::prelude::*;
use anchor_spl::token::{self, Token, TokenAccount, Mint, Transfer};

declare_id!("11111111111111111111111111111111");

#[program]
pub mod reward_pool {
    use super::*;

    /// üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Reward Pool
    pub fn initialize(ctx: Context<Initialize>) -> Result<()> {
        let pool = &mut ctx.accounts.pool_state;
        
        pool.authority = ctx.accounts.authority.key();
        pool.tama_mint = ctx.accounts.tama_mint.key();
        pool.reward_account = ctx.accounts.reward_account.key();
        pool.total_distributed = 0;
        pool.total_claims = 0;
        pool.is_active = true;
        pool.bump = ctx.bumps.pool_state;

        msg!("üí∞ Reward Pool –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
        msg!("üìä TAMA Mint: {}", pool.tama_mint);
        msg!("üëõ Reward Account: {}", pool.reward_account);
        
        Ok(())
    }

    /// üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å Reward Pool (—Ç–æ–ª—å–∫–æ admin)
    pub fn deposit_rewards(ctx: Context<DepositRewards>, amount: u64) -> Result<()> {
        let pool = &mut ctx.accounts.pool_state;
        
        require!(pool.is_active, ErrorCode::PoolNotActive);
        require!(
            ctx.accounts.authority.key() == pool.authority,
            ErrorCode::Unauthorized
        );

        // –ü–µ—Ä–µ–≤–æ–¥ TAMA –≤ pool
        let cpi_accounts = Transfer {
            from: ctx.accounts.from_account.to_account_info(),
            to: ctx.accounts.reward_account.to_account_info(),
            authority: ctx.accounts.authority.to_account_info(),
        };
        
        let cpi_ctx = CpiContext::new(
            ctx.accounts.token_program.to_account_info(),
            cpi_accounts,
        );
        
        token::transfer(cpi_ctx, amount)?;

        msg!("üí∞ Pool –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {} TAMA", amount / 1_000_000_000);
        Ok(())
    }

    /// üéÅ –í—ã–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ Tamagotchi –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞)
    pub fn claim_reward(ctx: Context<ClaimReward>, amount: u64) -> Result<()> {
        let pool = &mut ctx.accounts.pool_state;
        
        require!(pool.is_active, ErrorCode::PoolNotActive);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å pool
        let pool_balance = ctx.accounts.reward_account.amount;
        require!(pool_balance >= amount, ErrorCode::InsufficientFunds);

        // –ü–µ—Ä–µ–≤–æ–¥ TAMA –∏–∑ pool –∏–≥—Ä–æ–∫—É
        let seeds = &[
            b"reward_authority".as_ref(),
            &[ctx.bumps.reward_authority],
        ];
        let signer = &[&seeds[..]];
        
        let cpi_accounts = Transfer {
            from: ctx.accounts.reward_account.to_account_info(),
            to: ctx.accounts.to_account.to_account_info(),
            authority: ctx.accounts.reward_authority.to_account_info(),
        };
        
        let cpi_ctx = CpiContext::new_with_signer(
            ctx.accounts.token_program.to_account_info(),
            cpi_accounts,
            signer,
        );
        
        token::transfer(cpi_ctx, amount)?;

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        pool.total_distributed += amount;
        pool.total_claims += 1;

        msg!("üéÅ –í—ã–ø–ª–∞—á–µ–Ω–æ {} TAMA", amount / 1_000_000_000);
        Ok(())
    }

    /// ‚öôÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ pool (—Ç–æ–ª—å–∫–æ admin)
    pub fn update_settings(ctx: Context<UpdateSettings>, is_active: bool) -> Result<()> {
        let pool = &mut ctx.accounts.pool_state;
        
        require!(
            ctx.accounts.authority.key() == pool.authority,
            ErrorCode::Unauthorized
        );

        pool.is_active = is_active;

        msg!("‚öôÔ∏è Pool —Å—Ç–∞—Ç—É—Å: {}", if is_active { "–∞–∫—Ç–∏–≤–µ–Ω" } else { "–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" });
        Ok(())
    }

    /// üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É pool
    pub fn get_stats(ctx: Context<GetStats>) -> Result<()> {
        let pool = &ctx.accounts.pool_state;
        let balance = ctx.accounts.reward_account.amount;

        msg!("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê REWARD POOL:");
        msg!("üí∞ –ë–∞–ª–∞–Ω—Å: {} TAMA", balance / 1_000_000_000);
        msg!("üì§ –í—ã–ø–ª–∞—á–µ–Ω–æ: {} TAMA", pool.total_distributed / 1_000_000_000);
        msg!("üéÅ –í—Å–µ–≥–æ –≤—ã–ø–ª–∞—Ç: {}", pool.total_claims);
        msg!("‚ö° –°—Ç–∞—Ç—É—Å: {}", if pool.is_active { "–∞–∫—Ç–∏–≤–µ–Ω" } else { "–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" });
        
        Ok(())
    }

    /// üö® Emergency withdraw (—Ç–æ–ª—å–∫–æ admin)
    pub fn emergency_withdraw(ctx: Context<EmergencyWithdraw>, amount: u64) -> Result<()> {
        let pool = &ctx.accounts.pool_state;
        
        require!(
            ctx.accounts.authority.key() == pool.authority,
            ErrorCode::Unauthorized
        );

        let seeds = &[
            b"reward_authority".as_ref(),
            &[ctx.bumps.reward_authority],
        ];
        let signer = &[&seeds[..]];
        
        let cpi_accounts = Transfer {
            from: ctx.accounts.reward_account.to_account_info(),
            to: ctx.accounts.to_account.to_account_info(),
            authority: ctx.accounts.reward_authority.to_account_info(),
        };
        
        let cpi_ctx = CpiContext::new_with_signer(
            ctx.accounts.token_program.to_account_info(),
            cpi_accounts,
            signer,
        );
        
        token::transfer(cpi_ctx, amount)?;

        msg!("üö® Emergency withdraw: {} TAMA", amount / 1_000_000_000);
        Ok(())
    }
}

// ============================================================================
// Contexts
// ============================================================================

#[derive(Accounts)]
pub struct Initialize<'info> {
    #[account(
        init,
        payer = authority,
        space = 8 + PoolState::INIT_SPACE,
        seeds = [b"pool_state"],
        bump
    )]
    pub pool_state: Account<'info, PoolState>,
    
    #[account(mut)]
    pub authority: Signer<'info>,
    
    pub tama_mint: Account<'info, Mint>,
    
    /// Reward account - –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è TAMA –¥–ª—è —Ä–∞–∑–¥–∞—á–∏
    #[account(
        mut,
        constraint = reward_account.mint == tama_mint.key()
    )]
    pub reward_account: Account<'info, TokenAccount>,
    
    pub system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct DepositRewards<'info> {
    #[account(
        mut,
        seeds = [b"pool_state"],
        bump = pool_state.bump
    )]
    pub pool_state: Account<'info, PoolState>,
    
    pub authority: Signer<'info>,
    
    #[account(
        mut,
        constraint = from_account.owner == authority.key()
    )]
    pub from_account: Account<'info, TokenAccount>,
    
    #[account(
        mut,
        constraint = reward_account.key() == pool_state.reward_account
    )]
    pub reward_account: Account<'info, TokenAccount>,
    
    pub token_program: Program<'info, Token>,
}

#[derive(Accounts)]
pub struct ClaimReward<'info> {
    #[account(
        mut,
        seeds = [b"pool_state"],
        bump = pool_state.bump
    )]
    pub pool_state: Account<'info, PoolState>,
    
    /// PDA authority –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    #[account(
        seeds = [b"reward_authority"],
        bump
    )]
    /// CHECK: PDA authority
    pub reward_authority: AccountInfo<'info>,
    
    #[account(
        mut,
        constraint = reward_account.key() == pool_state.reward_account
    )]
    pub reward_account: Account<'info, TokenAccount>,
    
    /// –ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    #[account(mut)]
    pub to_account: Account<'info, TokenAccount>,
    
    pub token_program: Program<'info, Token>,
}

#[derive(Accounts)]
pub struct UpdateSettings<'info> {
    #[account(
        mut,
        seeds = [b"pool_state"],
        bump = pool_state.bump
    )]
    pub pool_state: Account<'info, PoolState>,
    
    pub authority: Signer<'info>,
}

#[derive(Accounts)]
pub struct GetStats<'info> {
    #[account(
        seeds = [b"pool_state"],
        bump = pool_state.bump
    )]
    pub pool_state: Account<'info, PoolState>,
    
    pub reward_account: Account<'info, TokenAccount>,
}

#[derive(Accounts)]
pub struct EmergencyWithdraw<'info> {
    #[account(
        seeds = [b"pool_state"],
        bump = pool_state.bump
    )]
    pub pool_state: Account<'info, PoolState>,
    
    pub authority: Signer<'info>,
    
    #[account(
        seeds = [b"reward_authority"],
        bump
    )]
    /// CHECK: PDA authority
    pub reward_authority: AccountInfo<'info>,
    
    #[account(
        mut,
        constraint = reward_account.key() == pool_state.reward_account
    )]
    pub reward_account: Account<'info, TokenAccount>,
    
    #[account(mut)]
    pub to_account: Account<'info, TokenAccount>,
    
    pub token_program: Program<'info, Token>,
}

// ============================================================================
// State
// ============================================================================

#[account]
#[derive(InitSpace)]
pub struct PoolState {
    pub authority: Pubkey,          // 32 - –∞–¥–º–∏–Ω
    pub tama_mint: Pubkey,          // 32 - –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ TAMA
    pub reward_account: Pubkey,     // 32 - –∞–∫–∫–∞—É–Ω—Ç —Å TAMA
    pub total_distributed: u64,     // 8 - –≤—Å–µ–≥–æ —Ä–æ–∑–¥–∞–Ω–æ
    pub total_claims: u64,          // 8 - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–ª–∞—Ç
    pub is_active: bool,            // 1 - –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ pool
    pub bump: u8,                   // 1
}

// ============================================================================
// Errors
// ============================================================================

#[error_code]
pub enum ErrorCode {
    #[msg("Pool is not active")]
    PoolNotActive,
    #[msg("Unauthorized")]
    Unauthorized,
    #[msg("Insufficient funds in pool")]
    InsufficientFunds,
}






