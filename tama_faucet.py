#!/usr/bin/env python3
"""
üí∞ TAMA Token Faucet –¥–ª—è Devnet
–†–∞–∑–¥–∞–µ—Ç 1000 TAMA —Ç–æ–∫–µ–Ω–æ–≤ —Ç–µ—Å—Ç–µ—Ä–∞–º
"""

import os
import sys
from solders.keypair import Keypair
from solders.pubkey import Pubkey
from solana.rpc.api import Client
from spl.token.instructions import transfer_checked, TransferCheckedParams
from solana.transaction import Transaction

# üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
RPC_URL = "https://api.devnet.solana.com"
TOKEN_MINT = "d8g1m1s14GFKw1P4kUjcTPjHrawwaPoJYPUhssXEjR6"  # ‚úÖ TAMA Token –Ω–∞ Devnet
DECIMALS = 9
AIRDROP_AMOUNT = 1_000 * (10 ** DECIMALS)  # 1000 TAMA

def load_wallet():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ—à–µ–ª–µ–∫ –∏–∑ wallet-devnet.json"""
    try:
        import json
        with open('wallet-devnet.json', 'r') as f:
            secret_key = json.load(f)
        return Keypair.from_bytes(bytes(secret_key))
    except FileNotFoundError:
        print("‚ùå wallet-devnet.json not found!")
        sys.exit(1)

def get_or_create_token_account(client, owner_pubkey, mint_pubkey, payer):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç Associated Token Account"""
    from spl.token.constants import TOKEN_PROGRAM_ID
    from spl.token.instructions import get_associated_token_address, create_associated_token_account
    
    ata = get_associated_token_address(owner_pubkey, mint_pubkey)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
    try:
        account_info = client.get_account_info(ata)
        if account_info.value is not None:
            print(f"‚úÖ Token account exists: {ata}")
            return ata
    except:
        pass
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π ATA
    print(f"üî® Creating token account for {owner_pubkey}...")
    ix = create_associated_token_account(
        payer=payer.pubkey(),
        owner=owner_pubkey,
        mint=mint_pubkey
    )
    
    tx = Transaction().add(ix)
    response = client.send_transaction(tx, payer)
    print(f"‚úÖ Token account created: {ata}")
    print(f"   TX: {response.value}")
    
    return ata

def send_tama_airdrop(recipient_address: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç 1000 TAMA —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å"""
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        client = Client(RPC_URL)
        print(f"üîó Connected to {RPC_URL}")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—à–µ–ª—å–∫–∞
        payer = load_wallet()
        print(f"üí≥ Payer: {payer.pubkey()}")
        
        # –ü—É–±–ª–∏—á–Ω—ã–µ –∫–ª—é—á–∏
        mint_pubkey = Pubkey.from_string(TOKEN_MINT)
        recipient_pubkey = Pubkey.from_string(recipient_address)
        
        # –ü–æ–ª—É—á–∏—Ç—å/—Å–æ–∑–¥–∞—Ç—å token accounts
        from spl.token.instructions import get_associated_token_address
        sender_ata = get_associated_token_address(payer.pubkey(), mint_pubkey)
        recipient_ata = get_or_create_token_account(client, recipient_pubkey, mint_pubkey, payer)
        
        print(f"\nüí∞ Sending {AIRDROP_AMOUNT / (10 ** DECIMALS)} TAMA...")
        print(f"   From: {sender_ata}")
        print(f"   To: {recipient_ata}")
        
        # –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é transfer
        from spl.token.constants import TOKEN_PROGRAM_ID
        
        ix = transfer_checked(
            TransferCheckedParams(
                program_id=TOKEN_PROGRAM_ID,
                source=sender_ata,
                mint=mint_pubkey,
                dest=recipient_ata,
                owner=payer.pubkey(),
                amount=AIRDROP_AMOUNT,
                decimals=DECIMALS,
            )
        )
        
        tx = Transaction().add(ix)
        response = client.send_transaction(tx, payer)
        signature = response.value
        
        print(f"\n‚úÖ SUCCESS! Sent 1000 TAMA to {recipient_address}")
        print(f"   Signature: {signature}")
        print(f"   Explorer: https://explorer.solana.com/tx/{signature}?cluster=devnet")
        
        return signature
        
    except Exception as e:
        print(f"\n‚ùå ERROR: {e}")
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    print("=" * 60)
    print("üí∞ TAMA TOKEN FAUCET - Devnet")
    print("=" * 60)
    
    if len(sys.argv) < 2:
        print("\nüìù Usage:")
        print("   python tama_faucet.py <recipient_wallet_address>")
        print("\nExample:")
        print("   python tama_faucet.py BXLs...8cRz")
        sys.exit(1)
    
    recipient = sys.argv[1]
    print(f"\nüéØ Recipient: {recipient}")
    
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã
    send_tama_airdrop(recipient)
    
    print("\n" + "=" * 60)
    print("‚ú® Done!")
    print("=" * 60)
