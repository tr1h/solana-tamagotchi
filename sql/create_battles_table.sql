-- Pet Battle Arena: Battles Table
-- This table handles PVP matchmaking and battle state

CREATE TABLE IF NOT EXISTS public.battles (
    id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    
    -- Battle Info
    battle_id text UNIQUE NOT NULL,
    status text NOT NULL DEFAULT 'waiting', -- waiting, in_progress, finished, cancelled
    bet_amount bigint NOT NULL,
    
    -- Players
    player1_id text NOT NULL,
    player1_name text,
    player1_level bigint,
    player1_ready boolean DEFAULT false,
    
    player2_id text,
    player2_name text,
    player2_level bigint,
    player2_ready boolean DEFAULT false,
    
    -- Battle State
    current_round bigint DEFAULT 1,
    max_rounds bigint DEFAULT 5,
    
    -- Moves (stored as JSONB array)
    player1_moves jsonb DEFAULT '[]'::jsonb,
    player2_moves jsonb DEFAULT '[]'::jsonb,
    
    -- Score
    player1_score bigint DEFAULT 0,
    player2_score bigint DEFAULT 0,
    
    -- Result
    winner_id text,
    prize_amount bigint,
    
    -- Timestamps
    started_at timestamp with time zone,
    finished_at timestamp with time zone,
    
    CONSTRAINT battles_pkey PRIMARY KEY (id)
);

-- Indexes for faster queries
CREATE INDEX IF NOT EXISTS battles_battle_id_idx ON public.battles USING btree (battle_id);
CREATE INDEX IF NOT EXISTS battles_status_idx ON public.battles USING btree (status);
CREATE INDEX IF NOT EXISTS battles_player1_id_idx ON public.battles USING btree (player1_id);
CREATE INDEX IF NOT EXISTS battles_player2_id_idx ON public.battles USING btree (player2_id);
CREATE INDEX IF NOT EXISTS battles_created_at_idx ON public.battles USING btree (created_at DESC);

-- Enable Row Level Security
ALTER TABLE public.battles ENABLE ROW LEVEL SECURITY;

-- Policies
CREATE POLICY "Enable read access for all users" ON public.battles FOR SELECT USING (true);
CREATE POLICY "Enable insert for all users" ON public.battles FOR INSERT WITH CHECK (true);
CREATE POLICY "Enable update for battle participants" ON public.battles FOR UPDATE USING (true);

-- Function to auto-update updated_at timestamp
CREATE OR REPLACE FUNCTION update_battles_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to auto-update updated_at
DROP TRIGGER IF EXISTS battles_updated_at_trigger ON public.battles;
CREATE TRIGGER battles_updated_at_trigger
    BEFORE UPDATE ON public.battles
    FOR EACH ROW
    EXECUTE FUNCTION update_battles_updated_at();

-- Function to clean up old waiting battles (older than 5 minutes)
CREATE OR REPLACE FUNCTION cleanup_old_battles()
RETURNS void AS $$
BEGIN
    UPDATE public.battles
    SET status = 'cancelled'
    WHERE status = 'waiting'
    AND created_at < now() - interval '5 minutes';
END;
$$ LANGUAGE plpgsql;

COMMENT ON TABLE public.battles IS 'Pet Battle Arena: PVP matchmaking and battle state';

